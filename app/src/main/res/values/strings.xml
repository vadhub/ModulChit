<resources>
    <string name="app_name">Analysis of algorithms</string>
    <string name="module">modulo</string>
    <string name="degree">degree</string>
    <string name="base_number">base</string>
    <string name="num1">number1</string>
    <string name="num2">number2</string>
    <string name="mod">mod</string>
    <string name="mod_number">number</string>
    <string name="number_1">modulo</string>
    <string name="number_2">number</string>
    <string name="gcd_e">GCD(E)</string>
    <string name="multiplicative_group">Multiplicative group</string>
    <string name="fast_exponentiation">Fast exponentiation</string>
    <string name="rsa">RSA</string>
    <string name="other">other</string>

    <string name="warning_out_bounds">Number more 2147483646!</string>
    <string name="warning_enter_text">Enter the number!</string>
    <string name="warning_zero">Zero is invalid!</string>
    <string name="warning_enter_letter">Enter only letters</string>
    <string name="warning_prime">Enter prime number 3, 5, 7...!</string>
    <string name="warning_enter_p_q">Enter p and q number!</string>
    <string name="encrypt">Encrypt</string>
    <string name="decrypt">Decrypt</string>
    <string name="first_number">first number</string>
    <string name="next">next</string>
    <string name="from_list">from list exponents: </string>
    <string name="get_first">" get: "</string>
    <string name="rsa_encrypt">RSA Encrypt</string>
    <string name="rsa_decrypt">RSA Decrypt</string>
    <string name="binary_search">Binary Search</string>
    <string name="bubble_sort">Bubble Sort</string>
    <string name="shell_sort">Shell Sort</string>
    <string name="insert_sort">Insert Sort</string>
    <string name="quick_sort">Quick Sort</string>
    <string name="selection_sort">Selection Sort</string>



    <string-array name="titleScreen">
        <item>GCD(E)</item>
        <item>Multiplicative group</item>
        <item>Fast exponentiation</item>
        <item>RSA</item>
        <item>Binary Search</item>
        <item>Bubble Sort</item>
        <item>Shell Sort</item>
        <item>Insert Sort</item>
        <item>Quick Sort</item>
        <item>Selection Sort</item>
    </string-array>

    <string-array name="modifyRsaAlpabyte">
        <item>random</item>
        <item>your</item>
    </string-array>

    <string name="alpha_1">Entering 10 is step in alphavite. p and q is primary number</string>
    <string name="rsa_1_en">Enter the message to be encrypted. n and e are calculated automatically if p and q (prime numbers) were entered in the previous window. n = p*q</string>
    <string name="rsa_2_en">e is coprime to n. From list we take first</string>
    <string name="rsa_3_en">Encryption is performed as follows: we take the number of a letter from the alphabet and perform a quick exponentiation to the power e modulo n.</string>
    <string name="rsa_4_en">The result of encryption will be a list of numbers:</string>
    <string name="rsa_1_dec">Enter a numeric code</string>
    <string name="rsa_2_dec">d(private) is the inverse of e(exponent). If it is negative, then the resulting number d is subtracted from the Euler number. d = gcde(Euler, e), (d*e)%Euler=1</string>
    <string name="rsa_3_dec">Next, the program itself will break the cipher code into blocks and, using the fast exponentiation algorithm modulo n, will issue a decrypted message</string>
    <string name="rsa_4_dec">Result is numbers of letters in alphabet and decrypted message.</string>
    <string name="fe_1">Entering values into the form: base = 4, degree = 13, mod = 497</string>
    <string name="fe_2">Values are written to the table: a = 4, m = 13, n = 497, p = a = 4, r = m mod 2 = 13 mod 2 = 1</string>
    <string name="fe_3">In the next line, the values are recalculated. If r = 0, then \'p\' is the value of \'a\' from the previous line.</string>
    <string name="fe_4">If r = 1, then p = [p(from the previous line)*a] mod n</string>
    <string name="fe_5">Repeat the algorithm until \'m\' is equal to 1. And the result is \'p = 445\'</string>
    <string name="gcde_1">Entering values into the form: a = 5, b = 3</string>
    <string name="gcde_2">Values are written to the table: a = 5, b =3. Initial vectors x = (1; 0) and y = (0; 1). q and r calculated as q = a/b, r = a - b*q</string>
    <string name="gcde_3">x and y calculated as x = y(previous), y = x - q*y(previous)</string>
    <string name="gcde_4">Repeat the algorithm until \'r\' is equal to 0. And the result is (-1; 2)</string>
    <string name="mg_1">Entering values into the form: mod = 5</string>
    <string name="mg_2">Algorithm is simple gcde. Take numbers that a = 1</string>
    <string name="mg_3">Result is 1; 2; 3; 4.</string>
    <string name="calc">calc</string>
    <string name="old_version">old version</string>
    <string name="about">About</string>

</resources>